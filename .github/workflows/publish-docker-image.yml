name: "Publish Docker Image"

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
      - "!v*-*"

env:
  SLUG_DOCKERHUB: ${{ secrets.DOCKER_USERNAME }}/ghs-server
  SLUG_GHCR: ${{ github.repository_owner }}/ghs-server

jobs:
  build-and-publish-docker-image:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.SLUG_DOCKERHUB }}
            ghcr.io/${{ env.SLUG_GHCR }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # automatic: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Lowercase GHCR repository name # required because docker doesn't support uppercase chars: https://github.com/docker/build-push-action/issues/37
        run: |
          echo "SLUG_GHCR_LC=${SLUG_GHCR,,}" >>${GITHUB_ENV}

      - name: Build and push AMD64 images with JIB
        run: |
          # SQLite AMD64
          mvn install -P db-sqlite-image -Dimage.name=${{ env.SLUG_DOCKERHUB }} -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64
          mvn install -P db-sqlite-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }} -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64
          # PostgreSQL AMD64
          mvn install -P db-postgresql-image -Dimage.name=${{ env.SLUG_DOCKERHUB }}-postgresql -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64
          mvn install -P db-postgresql-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64
          # MariaDB AMD64
          mvn install -P db-mariadb-image -Dimage.name=${{ env.SLUG_DOCKERHUB }}-mariadb -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64
          mvn install -P db-mariadb-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb -Djib.to.tags=${{ steps.meta.outputs.version }}-amd64 -Djib.from.platforms=linux/amd64

      - name: Build and push ARM64 images with JIB
        run: |
          # SQLite ARM64
          mvn install -P db-sqlite-image -Dimage.name=${{ env.SLUG_DOCKERHUB }} -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64
          mvn install -P db-sqlite-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }} -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64
          # PostgreSQL ARM64
          mvn install -P db-postgresql-image -Dimage.name=${{ env.SLUG_DOCKERHUB }}-postgresql -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64
          mvn install -P db-postgresql-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64
          # MariaDB ARM64
          mvn install -P db-mariadb-image -Dimage.name=${{ env.SLUG_DOCKERHUB }}-mariadb -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64
          mvn install -P db-mariadb-image -Dimage.name=ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb -Djib.to.tags=${{ steps.meta.outputs.version }}-arm64 -Djib.from.platforms=linux/arm64

      - name: Create and push multiarch manifests for DockerHub
        run: |
          # SQLite multiarch manifest
          docker manifest create ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }} \
            ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ${{ env.SLUG_DOCKERHUB }}:latest \
            ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}
          docker manifest push ${{ env.SLUG_DOCKERHUB }}:latest
          
          # PostgreSQL multiarch manifest
          docker manifest create ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }} \
            ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ${{ env.SLUG_DOCKERHUB }}-postgresql:latest \
            ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}
          docker manifest push ${{ env.SLUG_DOCKERHUB }}-postgresql:latest
          
          # MariaDB multiarch manifest
          docker manifest create ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }} \
            ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ${{ env.SLUG_DOCKERHUB }}-mariadb:latest \
            ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}-amd64 \
            ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}
          docker manifest push ${{ env.SLUG_DOCKERHUB }}-mariadb:latest

      - name: Create and push multiarch manifests for GHCR
        run: |
          # SQLite multiarch manifest
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }} \
            ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}:latest \
            ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}:latest
          
          # PostgreSQL multiarch manifest
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }} \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:latest \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:latest
          
          # MariaDB multiarch manifest
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }} \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}-arm64
          docker manifest create ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:latest \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}-amd64 \
            ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}
          docker manifest push ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:latest

      - name: Inspect SQLite Image published to Docker
        run: |
          docker pull "${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}"
          docker image inspect "${{ env.SLUG_DOCKERHUB }}:${{ steps.meta.outputs.version }}"
      - name: Inspect Postgresql Image published to Docker
        run: |
          docker pull "${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}"
          docker image inspect "${{ env.SLUG_DOCKERHUB }}-postgresql:${{ steps.meta.outputs.version }}"
      - name: Inspect MariaDB Image published to Docker
        run: |
          docker pull "${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}"
          docker image inspect "${{ env.SLUG_DOCKERHUB }}-mariadb:${{ steps.meta.outputs.version }}"
      - name: Inspect SQLite Image published to GHCR
        run: |
          docker pull "ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}"
          docker image inspect "ghcr.io/${{ env.SLUG_GHCR_LC }}:${{ steps.meta.outputs.version }}"
      - name: Inspect Postgresql Image published to GHCR
        run: |
          docker pull "ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}"
          docker image inspect "ghcr.io/${{ env.SLUG_GHCR_LC }}-postgresql:${{ steps.meta.outputs.version }}"
      - name: Inspect MariaDB Image published to GHCR
        run: |
          docker pull "ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}"
          docker image inspect "ghcr.io/${{ env.SLUG_GHCR_LC }}-mariadb:${{ steps.meta.outputs.version }}"
